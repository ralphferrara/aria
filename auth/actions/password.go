package actions

//||------------------------------------------------------------------------------------------------||
//|| Import
//||------------------------------------------------------------------------------------------------||

import (
	"encoding/base64"
	"fmt"

	"github.com/ralphferrara/aria/auth/setup"
	"github.com/ralphferrara/aria/base/random"
	"golang.org/x/crypto/argon2"
)

//||------------------------------------------------------------------------------------------------||
//|| HashPassword
//||------------------------------------------------------------------------------------------------||

func HashPassword(salt, raw string) string {
	//||------------------------------------------------------------------------------------------------||
	//|| Create Hash
	//||------------------------------------------------------------------------------------------------||
	hash := argon2.IDKey(
		[]byte(setup.Setup.Pepper+raw+setup.Setup.Pepper),
		[]byte(salt),
		1,       // iterations
		64*1024, // memory in KB
		4,       // threads
		32,      // output length
	)
	//||------------------------------------------------------------------------------------------------||
	//|| Return base64-encoded hash and salt
	//||------------------------------------------------------------------------------------------------||
	return base64.StdEncoding.EncodeToString(hash)
}

//||------------------------------------------------------------------------------------------------||
//|| GeneratePassword: Securely generates a password hash and salt for storage
//||------------------------------------------------------------------------------------------------||

func GeneratePassword(rawPassword string) (string, string) {
	//||------------------------------------------------------------------------------------------------||
	//|| Generate the Salt (UUID format, random string)
	//||------------------------------------------------------------------------------------------------||
	salt := random.RandomString(32)
	//||------------------------------------------------------------------------------------------------||
	//|| Create Argon2id Hash
	//||------------------------------------------------------------------------------------------------||
	hash := HashPassword(salt, rawPassword)
	//||------------------------------------------------------------------------------------------------||
	//|| Return base64-encoded hash and salt
	//||------------------------------------------------------------------------------------------------||
	return hash, salt
}

//||------------------------------------------------------------------------------------------------||
//|| GeneratePassword: Securely generates a password hash and salt for storage
//||------------------------------------------------------------------------------------------------||

func GeneratePasswordWithSalt(rawPassword, salt string) string {
	//||------------------------------------------------------------------------------------------------||
	//|| Create Argon2id Hash
	//||------------------------------------------------------------------------------------------------||
	hash := HashPassword(salt, rawPassword)
	//||------------------------------------------------------------------------------------------------||
	//|| Return base64-encoded hash and salt
	//||------------------------------------------------------------------------------------------------||
	return hash
}

//||------------------------------------------------------------------------------------------------||
//|| VerifyPassword: Verifies a password by re-generating and comparing the hash
//||------------------------------------------------------------------------------------------------||

func VerifyPassword(salt, rawPassword string, hashedPassword string) bool {
	//||------------------------------------------------------------------------------------------------||
	//|| Create Argon2id Hash with decoded salt
	//||------------------------------------------------------------------------------------------------||
	hash := HashPassword(salt, rawPassword)
	fmt.Println("Generated Hash: ", hash)
	fmt.Println("Stored Hash:    ", hashedPassword)
	fmt.Println("Salt:           ", salt)
	//||------------------------------------------------------------------------------------------------||
	//|| Compare hashes
	//||------------------------------------------------------------------------------------------------||
	return hash == hashedPassword
}
