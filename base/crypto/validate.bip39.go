package crypto

//||------------------------------------------------------------------------------------------------||
//|| Import
//||------------------------------------------------------------------------------------------------||

import (
	"encoding/json"
	"errors"
	"fmt"
	"strings"
)

//||------------------------------------------------------------------------------------------------||
//|| ValidateBIP39: Accepts a JSON array of words and validates each against the official BIP39 list
//||------------------------------------------------------------------------------------------------||

func ValidateBIP39(wordListJSON string) ([]string, error) {

	//||------------------------------------------------------------------------------------------------||
	//|| Empty Check
	//||------------------------------------------------------------------------------------------------||

	if strings.TrimSpace(wordListJSON) == "" {
		return nil, errors.New("missing BIP39 word list")
	}

	//||------------------------------------------------------------------------------------------------||
	//|| Parse JSON Array
	//||------------------------------------------------------------------------------------------------||

	var rawWords []string
	if err := json.Unmarshal([]byte(wordListJSON), &rawWords); err != nil {
		return nil, fmt.Errorf("invalid BIP39 word list format: %v", err)
	}

	//||------------------------------------------------------------------------------------------------||
	//|| Normalize and Filter
	//||------------------------------------------------------------------------------------------------||

	var words []string
	for _, w := range rawWords {
		w = strings.ToLower(strings.TrimSpace(w))
		if w != "" {
			words = append(words, w)
		}
	}

	if len(words) == 0 {
		return nil, errors.New("no valid BIP39 words provided")
	}

	//||------------------------------------------------------------------------------------------------||
	//|| Build BIP39 Lookup Map
	//||------------------------------------------------------------------------------------------------||

	validMap := make(map[string]struct{})
	for _, w := range DataBIP39() {
		validMap[w] = struct{}{}
	}

	//||------------------------------------------------------------------------------------------------||
	//|| Validate Each Word
	//||------------------------------------------------------------------------------------------------||

	for _, w := range words {
		if _, ok := validMap[w]; !ok {
			return nil, fmt.Errorf("invalid BIP39 word: %s", w)
		}
	}

	//||------------------------------------------------------------------------------------------------||
	//|| Return Validated Words
	//||------------------------------------------------------------------------------------------------||

	return words, nil
}
