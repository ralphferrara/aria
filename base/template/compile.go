package template

import (
	"fmt"
	"regexp"
	"strings"

	"github.com/ralphferrara/aria/locale"
)

//||------------------------------------------------------------------------------------------------||
//|| Template Markers
//||------------------------------------------------------------------------------------------------||

func (t TemplateInstance) Compile() string {
	//||------------------------------------------------------------------------------------------------||
	//|| Translations
	//||------------------------------------------------------------------------------------------------||
	re := regexp.MustCompile(`\{\{([^}]+)\}\}`)
	matches := re.FindAllStringSubmatch(t.Data, -1)
	//||------------------------------------------------------------------------------------------------||
	//|| Loop through matches and replace with translations
	//||------------------------------------------------------------------------------------------------||
	for _, match := range matches {
		if len(match) > 1 {
			raw := match[1]
			//||------------------------------------------------------------------------------------------------||
			//|| Skip if it doesn't contain a dot
			//||------------------------------------------------------------------------------------------------||
			if !strings.Contains(raw, ".") {
				continue
			}
			//||------------------------------------------------------------------------------------------------||
			//|| Get Parts
			//||------------------------------------------------------------------------------------------------||
			parts := strings.SplitN(raw, ".", 2)
			section := parts[0]
			key := parts[1]
			//||------------------------------------------------------------------------------------------------||
			//|| Get Translation
			//||------------------------------------------------------------------------------------------------||
			value, err := locale.GetTranslation(section, key, t.Language)
			if err != nil {
				fmt.Printf("Failed to get translation for %s.%s: %v\n", section, key, err)
				continue
			}
			//||------------------------------------------------------------------------------------------------||
			//|| Data Replace
			//||------------------------------------------------------------------------------------------------||
			t.Data = ReplaceMarker(t.Data, raw, value)
		}
	}
	//||------------------------------------------------------------------------------------------------||
	//|| Template Markers
	//||------------------------------------------------------------------------------------------------||
	for _, marker := range t.Markers {
		t.Data = replaceMarker(t.Data, marker.Marker, marker.Value)
	}
	//||------------------------------------------------------------------------------------------------||
	//|| Return Data
	//||------------------------------------------------------------------------------------------------||
	return t.Data
}
