//||------------------------------------------------------------------------------------------------||
//|| Config Package: Validation
//|| validate.go
//||------------------------------------------------------------------------------------------------||

package config

//||------------------------------------------------------------------------------------------------||
//|| Import
//||------------------------------------------------------------------------------------------------||

import (
	"errors"
	"fmt"
	"strings"
)

//||------------------------------------------------------------------------------------------------||
//|| validate: minimal sanity checks
//||------------------------------------------------------------------------------------------------||

func validate(c *Config) error {

	//||------------------------------------------------------------------------------------------------||
	//|| App
	//||------------------------------------------------------------------------------------------------||

	if c.App.Name == "" {
		return errors.New("app.name is required")
	}
	if c.App.Port <= 0 || c.App.Port > 65535 {
		return fmt.Errorf("app.port out of range: %d", c.App.Port)
	}

	//||------------------------------------------------------------------------------------------------||
	//|| HTTP
	//||------------------------------------------------------------------------------------------------||

	for name, h := range c.HTTP {
		if h.Port <= 0 || h.Port > 65535 {
			return fmt.Errorf("http[%s].port out of range: %d", name, h.Port)
		}
		switch strings.ToLower(h.Backend) {
		case "mux", "http":
			// ok
		default:
			return fmt.Errorf("http[%s].backend unsupported: %q (use 'mux' or 'http')", name, h.Backend)
		}
	}

	//||------------------------------------------------------------------------------------------------||
	//|| Database
	//||------------------------------------------------------------------------------------------------||

	for name, db := range c.DB {
		switch strings.ToLower(db.Driver) {
		case "postgres", "mysql", "mariadb", "mongo":
			// ok
		default:
			return fmt.Errorf("db[%s].driver unsupported: %q", name, db.Driver)
		}
	}

	//||------------------------------------------------------------------------------------------------||
	//|| Done
	//||------------------------------------------------------------------------------------------------||

	return nil
}
