//||------------------------------------------------------------------------------------------------||
//|| Config Package: Loader
//|| init.go
//||------------------------------------------------------------------------------------------------||

package config

//||------------------------------------------------------------------------------------------------||
//|| Import
//||------------------------------------------------------------------------------------------------||

import (
	"encoding/json"
	"fmt"
	"os"
	"sync"
)

//||------------------------------------------------------------------------------------------------||
//|| Config: Globals
//||------------------------------------------------------------------------------------------------||

var (
	config *Config
	once   sync.Once
)

//||------------------------------------------------------------------------------------------------||
//|| Init loads config.json ONCE and caches it globally
//||------------------------------------------------------------------------------------------------||

func Init(path string) (*Config, error) {
	var err error
	once.Do(func() {
		f, ferr := os.Open(path)
		if ferr != nil {
			err = ferr
			return
		}
		defer f.Close()
		cfg := &Config{}
		decoder := json.NewDecoder(f)
		derr := decoder.Decode(cfg)
		if derr != nil {
			err = derr
			return
		}
		config = cfg
	})
	if config == nil && err == nil {
		err = fmt.Errorf("config not loaded")
	}
	return config, err
}

//||------------------------------------------------------------------------------------------------||
//|| Config: Accessor (returns pointer, may be nil if not loaded)
//||------------------------------------------------------------------------------------------------||

func GetConfig() *Config {
	return config
}
